generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  nickname  String
  password  String
  image     String?
  bio       String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  role      UserRole  @default(User)
  note      Note[]
  project   Project[]
  progress  Progress?
  tag       Tag?
  Event     Event[]
  // Announcements Announcement[]
  // Posts         ForumPost[]
  // Comments      Comment[]
  // Likes         Like[]
}

enum UserRole {
  User
  Admin
}

enum NoteType {
  Dir
  Note
}

model Project {
  id          Int       @id @default(autoincrement())
  title       String
  startTime   DateTime?
  endTime     DateTime?
  job         String
  stacks      String
  describe    String
  highlight   String    @default("")
  imageUrl    String    @default("")
  createdById Int
  createdBy   User      @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Progress {
  id          Int      @id @default(autoincrement())
  course      String
  wordIndex   Int
  createdById Int      @unique
  createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Devlog {
  id        Int      @id @default(autoincrement())
  time      String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Note {
  id          Int      @id @default(autoincrement())
  title       String
  tags        String   @default("[]")
  content     String   @db.Text
  createdById Int
  createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  toDo        String   @db.Text
  inProgress  String   @db.Text
  completed   String   @db.Text
  createdById Int
  createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([title, createdById])
}

model Tag {
  id          Int      @id @default(autoincrement())
  tags        String   @default("[]") @db.VarChar(1024)
  createdById Int      @unique
  createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// model Announcement {
//   id          String   @id
//   title       String
//   content     String
//   createdById Int      @unique
//   createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade)
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
//   isPinned    Boolean  @default(false)
//   isActive    Boolean  @default(true)
// }
//
// model ForumPost {
//   id          String    @id
//   title       String
//   content     String
//   createdById Int       @unique
//   createdBy   User      @relation(fields: [createdById], references: [id], onDelete: Cascade)
//   createdAt   DateTime  @default(now())
//   updatedAt   DateTime  @updatedAt
//   viewCount   Int       @default(0)
//   isPinned    Boolean   @default(false)
//   isLocked    Boolean   @default(false)
//   comments    Comment[]
//   likes       Like[]
// }
//
// model Comment {
//   id              String    @id
//   postId          String
//   post            ForumPost @relation(fields: [postId], references: [id])
//   createdById     Int       @unique
//   createdBy       User      @relation(fields: [createdById], references: [id], onDelete: Cascade)
//   content         String
//   createdAt       DateTime  @default(now())
//   updatedAt       DateTime  @updatedAt
//   parentCommentId String?
//   parentComment   Comment?  @relation("CommentToComment", fields: [parentCommentId], references: [id])
//   childComments   Comment[] @relation("CommentToComment")
//   likes           Like[]
// }
//
// model Like {
//   id        String     @id
//   userId    Int
//   user      User       @relation(fields: [userId], references: [id])
//   postId    String?
//   post      ForumPost? @relation(fields: [postId], references: [id])
//   commentId String?
//   comment   Comment?   @relation(fields: [commentId], references: [id])
//   createdAt DateTime   @default(now())
//
//   @@unique([userId, postId])
//   @@unique([userId, commentId])
// }
