generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  username     String         @unique
  nickname     String
  password     String
  image        String?
  bio          String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  role         UserRole       @default(User)
  note         Note[]
  project      Project[]
  progress     Progress?
  tag          Tag?
  Event        Event[]
  Post         Post[]
  Comment      Comment[]
  Like         Like[]
  DailyCheckIn DailyCheckIn[]
}

enum UserRole {
  User
  Admin
}

enum NoteType {
  Dir
  Note
}

model Project {
  id          Int       @id @default(autoincrement())
  title       String
  startTime   DateTime?
  endTime     DateTime?
  job         String
  stacks      String
  describe    String
  highlight   String    @default("")
  imageUrl    String    @default("")
  createdById Int
  createdBy   User      @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Progress {
  id          Int      @id @default(autoincrement())
  course      String
  wordIndex   Int
  createdById Int      @unique
  createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Notice {
  id        Int      @id @default(autoincrement())
  time      DateTime
  brief     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Acticle {
  id          Int      @id @default(autoincrement())
  title       String
  tags        String   @default("[]")
  content     String   @db.Text
  createdById Int
  createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  toDo        String   @db.Text
  inProgress  String   @db.Text
  completed   String   @db.Text
  createdById Int
  createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([title, createdById])
}

model Tag {
  id          Int      @id @default(autoincrement())
  tags        String   @default("[]") @db.VarChar(1024)
  createdById Int      @unique
  createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Post {
  id          Int        @id @default(autoincrement())
  title       String
  content     String
  createdById Int
  createdBy   User       @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  viewCount   Int        @default(0)
  isPinned    Boolean    @default(false)
  isLocked    Boolean    @default(false)
  visibility  Visibility @default(PUBLIC)
  comments    Comment[]
  likes       Like[]
}

enum Visibility {
  PRIVATE
  FRIENDS_ONLY
  PUBLIC
}

model Comment {
  id              Int       @id @default(autoincrement())
  postId          Int
  post            Post      @relation(fields: [postId], references: [id])
  createdById     Int
  createdBy       User      @relation(fields: [createdById], references: [id], onDelete: Cascade)
  content         String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  parentCommentId Int?
  parentComment   Comment?  @relation("CommentToComment", fields: [parentCommentId], references: [id])
  childComments   Comment[] @relation("CommentToComment")
  likes           Like[]
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    Int?
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  commentId Int?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@unique([userId, commentId])
}

model DailyCheckIn {
  id              Int      @id @default(autoincrement())
  userId          Int
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  checkInDate     DateTime @default(now())
  streak          Int      @default(1)
  monthlyCheckIns Int      @default(1)

  @@unique([userId, checkInDate])
  @@index([userId, checkInDate])
}
